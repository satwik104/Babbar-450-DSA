 //approach 1 using hashset
    //we apply sets when ever we have problems in shich we need to avoid duplicates
    //TC- O(N+M) SC-O(N+M)
    /*
    vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        unordered_set<int> set;
        for(int i=0;i<n;i++)
        {
            set.insert(arr1[i]);//this will take unique/disticnt elements from arr1 in set
                                //avoiding repeat values
        }
        for(int i=0;i<m;i++)
        {
            if(set.find(arr2[i])==set.end())
              set.insert(arr2[i]);
        }
        //now we have all elements from both array which contribute in union
        vector<int> v;
        unordered_set<int>::iterator i;
        for(i=set.begin();i!=set.end();i++)
            v.push_back(*i);
        return v;
    }*/
    
    //APPROACH 2,optimizing the SC with two pointer approach
     vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        int i=0,j=0;
        vector<int> v;
        while(i<n and j<m)
        {
           if(arr1[i]<=arr2[j])
           {
               if(v.empty() || v[v.size()-1]!=arr1[i])//to avoid repeatition
               v.push_back(arr1[i]);
               i++;
           }
           else
           {
               if(v.empty() || v[v.size()-1]!=arr2[j])//to avoid repeatition
               v.push_back(arr2[j]);
               j++;
           }
        }
        //if any array got exhaust then we need to work on prticular arry without doing any comparisons
        while(i<n)
        {
            if(v.empty() || v[v.size()-1]!=arr1[i])//to avoid repeatition
            v.push_back(arr1[i]);
            i++;
        }
         while(j<m)
        {
            if(v.empty() || v[v.size()-1]!=arr2[j])//to avoid repeatition
            v.push_back(arr2[j]);
            j++;
        }
        return v;
    }
